Project Dependencies:
-----------------------
pthread
crypto
jsoncpp

sudo yum install jsoncpp-devel 
sudo yum install -y openssl-devel

Project Limitations:
--------------------
1) file name should have no spaces
2) command buffer size 1024
3) max file size - ?



Peer has two interfaces:
--------------------------

a). command interface
	peer>
b). socket interface (for other peers to download)
	telnet localhost 8888


peer as a sender of piece:
---------------------------
	- provide an interface to send the metadata of the available pieces
		list of:
			piece number
			piece size
	
	- provide an interface to send the requested piece
		- check if it has the requested piece
		- read the data of that piece (with the offset info) from the file

peer as a receiver of pieces:
-----------------------------
	 - request pieces information from "all seeders" of the file
	 - perform piece selection algorithm which maps pieces to the target seeders
	 - request piece from the seeder as mentioned by piece selection algorithm
	 - update information in available pieces in piece_info file
			file_name.pieces_info
	 - after receiving the first piece, send a request to tracket to update the seeders list for that file		
	
	
what about peer that has the completed file and uploaded to tracker?
	- consider this as a peer that received complete file
	- its availability for seeding is alreadt updated in the tracker metadata file
	- build information of all available pieces in pieces_info file


Scenario:
-----------

	file 1 has 4 chunks: chunk1, chunk2, chunk3, chunk4
	peer4 requesting file1 for download

	chunks availability table
	---------------------------

	chunk1	chunk2	chunk3	chunk4
	------	------	------	------
	peer1	peer3	peer2	peer1
	peer2			peer1
	peer3

	piece selection algorithm:
	---------------------------

	- Choose peer withs rarest available chunks first to dowlnload those chunks
		download chunk2 and chunk4

	- For other chunks which are found on multiple peers, choose peers for those chunks such that load is balance among the peers
		download chunk 1 from peer1 and download chunk3 from peer2

	download distribution (balancing) among peers
	------------------------------------------------

	peer1 	peer2	peer3
	chunk4	chunk3	chunk2
	chunk1



